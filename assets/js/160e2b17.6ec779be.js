"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5054],{7580:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>a,frontMatter:()=>s,metadata:()=>d,toc:()=>o});var n=i(5893),t=i(1151);const s={},l="IVerifier",d={id:"solidity-docs/crypto/Verifier",title:"IVerifier",description:"an interface for a Groth16 verifier contract",source:"@site/versioned_docs/version-v1.x/solidity-docs/crypto/Verifier.md",sourceDirName:"solidity-docs/crypto",slug:"/solidity-docs/crypto/Verifier",permalink:"/docs/solidity-docs/crypto/Verifier",draft:!1,unlisted:!1,editUrl:"https://github.com/privacy-scaling-explorations/maci/edit/dev/website/versioned_docs/version-v1.x/solidity-docs/crypto/Verifier.md",tags:[],version:"v1.x",frontMatter:{},sidebar:"version-1.x/mySidebar",previous:{title:"SnarkConstants",permalink:"/docs/solidity-docs/crypto/SnarkConstants"},next:{title:"FreeForAllGatekeeper",permalink:"/docs/solidity-docs/gatekeepers/FreeForAllSignUpGatekeeper"}},c={},o=[{value:"verify",id:"verify",level:3},{value:"MockVerifier",id:"mockverifier",level:2},{value:"verify",id:"verify-1",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Return Values",id:"return-values",level:4},{value:"Verifier",id:"verifier",level:2},{value:"Proof",id:"proof",level:3},{value:"PRIME_Q",id:"prime_q",level:3},{value:"ERROR_PROOF_Q",id:"error_proof_q",level:3},{value:"ERROR_INPUT_VAL",id:"error_input_val",level:3},{value:"verify",id:"verify-2",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Return Values",id:"return-values-1",level:4}];function h(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"iverifier",children:"IVerifier"}),"\n",(0,n.jsx)(r.p,{children:"an interface for a Groth16 verifier contract"}),"\n",(0,n.jsx)(r.h3,{id:"verify",children:"verify"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-solidity",children:"function verify(uint256[8], struct SnarkCommon.VerifyingKey, uint256) public view virtual returns (bool)\n"})}),"\n",(0,n.jsx)(r.p,{children:"Verify a zk-SNARK proof"}),"\n",(0,n.jsx)(r.h2,{id:"mockverifier",children:"MockVerifier"}),"\n",(0,n.jsx)(r.p,{children:"a MockVerifier to be used for testing"}),"\n",(0,n.jsx)(r.h3,{id:"verify-1",children:"verify"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-solidity",children:"function verify(uint256[8] proof, struct SnarkCommon.VerifyingKey vk, uint256 input) public view returns (bool result)\n"})}),"\n",(0,n.jsx)(r.p,{children:"Verify a zk-SNARK proof (test only return always true)"}),"\n",(0,n.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Name"}),(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"proof"}),(0,n.jsx)(r.td,{children:"uint256[8]"}),(0,n.jsx)(r.td,{children:"The proof"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"vk"}),(0,n.jsx)(r.td,{children:"struct SnarkCommon.VerifyingKey"}),(0,n.jsx)(r.td,{children:"The verifying key"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"input"}),(0,n.jsx)(r.td,{children:"uint256"}),(0,n.jsx)(r.td,{children:"The public inputs to the circuit"})]})]})]}),"\n",(0,n.jsx)(r.h4,{id:"return-values",children:"Return Values"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Name"}),(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsx)(r.tbody,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"result"}),(0,n.jsx)(r.td,{children:"bool"}),(0,n.jsx)(r.td,{children:"Whether the proof is valid given the verifying key and public"})]})})]}),"\n",(0,n.jsx)(r.h2,{id:"verifier",children:"Verifier"}),"\n",(0,n.jsx)(r.p,{children:"a Groth16 verifier contract"}),"\n",(0,n.jsx)(r.h3,{id:"proof",children:"Proof"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-solidity",children:"struct Proof {\n  struct Pairing.G1Point a;\n  struct Pairing.G2Point b;\n  struct Pairing.G1Point c;\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"prime_q",children:"PRIME_Q"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-solidity",children:"uint256 PRIME_Q\n"})}),"\n",(0,n.jsx)(r.h3,{id:"error_proof_q",children:"ERROR_PROOF_Q"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-solidity",children:"string ERROR_PROOF_Q\n"})}),"\n",(0,n.jsx)(r.h3,{id:"error_input_val",children:"ERROR_INPUT_VAL"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-solidity",children:"string ERROR_INPUT_VAL\n"})}),"\n",(0,n.jsx)(r.h3,{id:"verify-2",children:"verify"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-solidity",children:"function verify(uint256[8] _proof, struct SnarkCommon.VerifyingKey vk, uint256 input) public view returns (bool isValid)\n"})}),"\n",(0,n.jsx)(r.p,{children:"Verify a zk-SNARK proof"}),"\n",(0,n.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Name"}),(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"_proof"}),(0,n.jsx)(r.td,{children:"uint256[8]"}),(0,n.jsx)(r.td,{children:"The proof"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"vk"}),(0,n.jsx)(r.td,{children:"struct SnarkCommon.VerifyingKey"}),(0,n.jsx)(r.td,{children:"The verifying key"})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"input"}),(0,n.jsx)(r.td,{children:"uint256"}),(0,n.jsx)(r.td,{children:"The public inputs to the circuit"})]})]})]}),"\n",(0,n.jsx)(r.h4,{id:"return-values-1",children:"Return Values"}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Name"}),(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsx)(r.tbody,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"isValid"}),(0,n.jsx)(r.td,{children:"bool"}),(0,n.jsx)(r.td,{children:"Whether the proof is valid given the verifying key and public          input. Note that this function only supports one public input.          Refer to the Semaphore source code for a verifier that supports          multiple public inputs."})]})})]})]})}function a(e={}){const{wrapper:r}={...(0,t.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},1151:(e,r,i)=>{i.d(r,{Z:()=>d,a:()=>l});var n=i(7294);const t={},s=n.createContext(t);function l(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);